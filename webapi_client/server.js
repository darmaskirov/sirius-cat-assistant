import '../js/catPhrases.js';
import '../js/catStyles.js';
import '../js/changeTheme.js';
import '../js/LoadScreen.js';
import '../js/modal_windows.js';
import '../js/script.js';
import '../js/ToggleNavbar.js';
import '../js/version.js';

let isMicActive = false; // –°—Ç–∞–Ω –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
let mediaStream = null;
let recognizerProcessor = null;
let audioContext = null;

async function init() {
    try {
        const resultsContainer = document.getElementById('recognition-result');
        const partialContainer = document.getElementById('partial');
        const ireneMode = document.getElementById('irenemode');

        const channel = new MessageChannel();
        const model = await Vosk.createModel('/webapi_client/model.tar.gz');
        model.registerPort(channel.port1);

        const sampleRate = 48000;

        const recognizer = new model.KaldiRecognizer(sampleRate);
        recognizer.setWords(true);

        recognizer.on("result", (message) => {
            const result = message.result;

            updateRecognitionResult(result.text);

            if (result.text !== "") {
                processServerResponse(result.text, ireneMode.value);
            }
        });

        recognizer.on("partialresult", (message) => {
            partialContainer.textContent = message.result.partial;
        });

        mediaStream = await navigator.mediaDevices.getUserMedia({
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                channelCount: 1,
            },
        });

        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        await audioContext.audioWorklet.addModule('recognizer-processor.js');
        recognizerProcessor = new AudioWorkletNode(audioContext, 'recognizer-processor', { channelCount: 1 });
        recognizerProcessor.port.postMessage({ action: 'init', recognizerId: recognizer.id }, [channel.port2]);
        recognizerProcessor.connect(audioContext.destination);

        const source = audioContext.createMediaStreamSource(mediaStream);
        source.connect(recognizerProcessor);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:", error);
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ–∑–≤–æ–ª–∏.");
    }
}

function toggleMic() {
    const trigger = document.getElementById('trigger');

    if (isMicActive) {
        trigger.textContent = "–°–ª—É—Ö–∞—Ç–∏";
        if (mediaStream) {
            mediaStream.getTracks().forEach(track => track.stop());
        }
        if (audioContext) {
            audioContext.close();
        }
        isMicActive = false;
    } else {
        trigger.textContent = "–í–∏–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω";
        init();
        isMicActive = true;
    }
}

function sanitizeText(input) {
    return input.replace(/[#\w]*|[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}]+/gu, '').trim();
}

async function processServerResponse(text, mode) {
    const sanitizedText = sanitizeText(text);
    const url = `/sendRawTxt?returnFormat=${mode}&rawtxt=${sanitizedText}`;
    console.log("–ó–∞–ø–∏—Ç URL:", url);

    try {
        const response = await fetch(url);
        const res = await response.json();

        if ("restxt" in res) {
            console.log("–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:", res.restxt);
            displayTextInDialog(res.restxt);

            if (res.restxt.includes("–≤—ñ–¥–º—ñ–Ω–∞")) {
                stopAllProcesses();
                return;
            }

            speakTextWithModifications(res.restxt); 
            if (res.restxt.includes("üëã")) wavePaw(3, 300); // –õ–∞–ø–∫–∞ –º–∞—Ö–Ω–µ 5 —Ä–∞–∑—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 300 –º—Å
            if (res.restxt.includes("üï∫")) wavePaw(3, 300);
            if (res.restxt.includes("üò°")) {
                startTalking();
                showMiddleFinger();
            }
        }

        if ("wav_base64" in res) {
            const snd = Sound("data:audio/wav;base64," + res.wav_base64);
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    }
}

function stopAllProcesses() {
    speechSynthesis.cancel();
    console.log("–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —ñ –≥–æ–ª–æ—Å—É –∑—É–ø–∏–Ω–µ–Ω–æ.");
}

function updateRecognitionResult(text) {
    const recognitionResult = document.getElementById('recognition-result');
    recognitionResult.textContent = text;
}

function displayTextInDialog(fullText) {
    const dialogBubble = document.getElementById('comic-dialog');
    const words = fullText.split(' ');
    let index = 0;

    const displayChunk = () => {
        if (index < words.length) {
            const chunk = words.slice(index, index + 6).join(' ');
            dialogBubble.textContent = chunk;
            index += 6;

            setTimeout(displayChunk, 2000);
        }
    };

    displayChunk();
}

async function speakTextWithModifications(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'uk-UA';
    utterance.rate = 1.1;
    utterance.pitch = 0,5;

    speechSynthesis.speak(utterance);

    utterance.onend = async () => {
        console.log("–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
        startDynamicTalkingAnimation(); // –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    };
}

document.getElementById('trigger').addEventListener('click', () => {
    const utterance = new SpeechSynthesisUtterance("–≤—ñ—Ç–∞—é –ª—é–¥–∏–Ω–æ —è- –∫–æ—Ç–∏–∫ –°—Å—ñ—Ä—ñ—É—Å.");
    utterance.lang = 'uk-UA';
    utterance.rate = 1.1;
    utterance.pitch = 0,5;

    speechSynthesis.speak(utterance);

    utterance.onstart = () => {
        console.log("–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ.");
    };

    utterance.onend = () => {
        console.log("–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
    };
});

var Sound = (function () {
    var df = document.createDocumentFragment();
    return function Sound(src) {
        var snd = new Audio(src);
        df.appendChild(snd);
        snd.addEventListener('ended', function () {
            df.removeChild(snd);
        });
        snd.play();
        return snd;
    };
})();



let context, analyser, src, array, audioLevel;
const num = 64; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
array = new Uint8Array(num);

window.onload = () => {
    const trigger = document.getElementById('trigger');
    trigger.addEventListener('click', toggleMic);
};

window.onclick = function () {
    if (context) return;

    context = new AudioContext(); // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä AudioContext
    analyser = context.createAnalyser(); // –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –∑–≤—É–∫—É

    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω
    navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
            src = context.createMediaStreamSource(stream);
            src.connect(analyser);
            loop(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ä–æ—Ç–∞
        })
        .catch(error => {
            alert(error + '\r\n\ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
            location.reload();
        });
}

function loop() {
    window.requestAnimationFrame(loop);
    analyser.getByteFrequencyData(array);

    let sum = 0;
    for (let i = 0; i < num; i++) {
        sum += array[i]; // –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–≤—É–∫—É
    }

    audioLevel = sum / num;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ä–æ—Ç–∞ –∫–æ—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è –∑–≤—É–∫—É
    updateCatMouth(audioLevel);
}

function updateCatMouth(level) {
    const catMouth = document.getElementById('cat-mouth');
    
    // –ó–º—ñ–Ω—é—î–º–æ –≤–∏—Å–æ—Ç—É —á–∏ —Ñ–æ—Ä–º—É —Ä–æ—Ç–∞ –∫–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–≤—É–∫—É
    const mouthSize = Math.min(30, level / 5); // –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    catMouth.style.height = `${10 + mouthSize}px`; // –±–∞–∑–æ–≤–∞ –≤–∏—Å–æ—Ç–∞ –ø–ª—é—Å —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–≤—É–∫
}



 
// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Å–≤–∞–π–ø—É
const swipeButton = document.createElement("button");
swipeButton.textContent = "–°–≤–∞–π–ø —Å–ø—Ä–∞—Ü—é–≤–∞–≤";
Object.assign(swipeButton.style, {
    position: "fixed",
    bottom: "90px",
    left: "10px",
    padding: "10px 20px",
    backgroundColor: "#007bff",
    color: "#fff",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    zIndex: "1000"
});
document.body.appendChild(swipeButton);

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
swipeButton.addEventListener("click", () => {
    const ireneMode = document.getElementById('irenemode');
    if (ireneMode) {
        console.log(`–ö–Ω–æ–ø–∫–∞ —Å–≤–∞–π–ø: ireneMode=${ireneMode.value}`);
        processServerResponse2("–°—ñ—Ä—ñ—É—Å –∫—É—Ö–Ω—è", ireneMode.value); // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    } else {
        console.error("–ï–ª–µ–º–µ–Ω—Ç ireneMode –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    }
});

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ—Å–ª—è —Å–≤–∞–π–ø—É
async function processServerResponse2(text, mode) {
    const sanitizedText = sanitizeText(text); // –°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
    const url = `/sendRawTxt?returnFormat=${mode}&rawtxt=${sanitizedText}`;
    console.log("–ó–∞–ø–∏—Ç URL:", url);

    try {
        const response = await fetch(url); // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
        const res = await response.json();

        if ("restxt" in res) {
            console.log("–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:", res.restxt);
            displayTextInDialog(res.restxt); // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É –≤—ñ–∫–Ω—ñ –¥—ñ–∞–ª–æ–≥—É

            if (res.restxt.includes("–≤—ñ–¥–º—ñ–Ω–∞")) {
                stopAllProcesses(); // –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –ø—Ä–æ—Ü–µ—Å–∏, —è–∫—â–æ —î —Å–ª–æ–≤–æ "–≤—ñ–¥–º—ñ–Ω–∞"
                return;
            }

            speakTextWithModifications(res.restxt); // –°–∏–Ω—Ç–µ–∑ –º–æ–≤–∏ –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏

            // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
            if (res.restxt.includes("üï∫")) wavePaw(3, 300); // –õ–∞–ø–∫–∞ –º–∞—Ö–Ω–µ 5 —Ä–∞–∑—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 300 –º—Å 
              
            if (res.restxt.includes("üò°")) {
                startAngry();
                showMiddleFinger();
            }
        }

        // –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ, —è–∫—â–æ —î base64
        if ("wav_base64" in res) {
            const snd = Sound("data:audio/wav;base64," + res.wav_base64);
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    }
}

// –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑—ñ —Å–≤–∞–π–ø–æ–º
document.addEventListener("touchstart", (event) => {
    touchStartX = event.touches[0].clientX;
    touchStartY = event.touches[0].clientY;
    console.log(`Touchstart: (${touchStartX}, ${touchStartY})`);
});

document.addEventListener("touchend", (event) => {
    touchEndX = event.changedTouches[0].clientX;
    touchEndY = event.changedTouches[0].clientY;
    const diffX = touchEndX - touchStartX;
    const diffY = touchEndY - touchStartY;

    console.log(`Touchend: (${touchEndX}, ${touchEndY}), DiffX: ${diffX}, DiffY: ${diffY}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–≤–∞–π–ø—É –∑–Ω–∏–∑—É –≤–≥–æ—Ä—É
    if (Math.abs(diffX) < 50 && diffY < -50) {
        console.log("–°–≤–∞–π–ø –∑–Ω–∏–∑—É –≤–≥–æ—Ä—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ");
        showSwipeIndicator();

        const ireneMode = document.getElementById('irenemode');
        if (ireneMode) {
            console.log(`ireneMode: ${ireneMode.value}`);
            processServerResponse2("–°—ñ—Ä—ñ—É—Å –∫—É—Ö–Ω—è", ireneMode.value); // –í–∏–∫–ª–∏–∫ –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
        } else {
            console.error("–ï–ª–µ–º–µ–Ω—Ç ireneMode –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        }
    }
});






